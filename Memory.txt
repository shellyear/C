1️⃣.  memory layout of process

## General Multi-Threaded Process Memory Layout
- Each process has a virtual memory space divided into different segments. Some of these segments are shared among all threads, while others (like the stack) are unique to each thread.

HIGH MEMORY (Largest Addresses)
────────────────────────────────────────────────────────────
|  KERNEL SPACE (NOT directly Accessible to Process)   |  <-- Managed by OS - shared by all processes. (KERNEL SPACE is not part of the process, it belongs to the OS)
|  - System calls, device drivers, memory management   |   When a process needs to interact with the kernel (e.g., file I/O, networking, memory management), it must use system calls (like read(), write(), mmap())
────────────────────────────────────────────────────────────
|  COMMAND-LINE ARGUMENTS & ENV VARIABLES              |  ~128KB - 2MB  
|  - Passed to `main()` on program start               |  Read-Only (r--)  
|  - Shared by all threads                             |
────────────────────────────────────────────────────────────
|  THREAD 1 STACK (Grows Down)                         |  ~8MB (Default)
|  - Function calls, return addresses, local vars      |  Read-Write (rw-)  
|  - Private to Thread 1                               |
|------------------------------------------------------|
|  THREAD 1 GUARD PAGE (Protects Stack)                |  ~4KB - 64KB  (---)
|------------------------------------------------------|
|  THREAD 1 LOCAL STORAGE (TLS)                        |  ~8KB - 64KB  
|  - Stores thread-specific `thread_local` variables   |  Read-Write (rw-)  
|  - Private to Thread 1                               |  
────────────────────────────────────────────────────────────
|  MAIN THREAD STACK (Grows Down)                      |  ~8MB (Default)
|  - Function calls, return addresses, local vars      |  Read-Write (rw-)  
|  - Private to Main Thread                            |
|------------------------------------------------------|
|  MAIN THREAD GUARD PAGE (Protects Stack)             |  ~4KB - 64KB  (---)  
|------------------------------------------------------|
|  MAIN THREAD LOCAL STORAGE (TLS)                     |  ~8KB - 64KB  
|  - Stores thread-specific `thread_local` variables   |  Read-Write (rw-)  
|  - Private to Main Thread                            |
────────────────────────────────────────────────────────────
|  HEAP (Grows Up)                                     |  Dynamic
|  - Stores dynamically allocated memory (`malloc`)    |  Read-Write (rw-)  
|  - Shared by both threads                            |  BSS - Block Started by Symbol
────────────────────────────────────────────────────────────
|  BSS (Uninitialized Global/Static Variables)         |  ~8KB - 1MB
|  - Global/static variables with no explicit value    |  Read-Write (rw-)
|  - Shared by both threads                            |
────────────────────────────────────────────────────────────
|  DATA (Initialized Global/Static Variables)          |  ~8KB - 1MB  
|  - Global/static variables with initial values       |  Read-Write (rw-)  
|  - Shared by both threads                            |
────────────────────────────────────────────────────────────
|  READ-ONLY DATA (.rodata)                            |  ~4KB - 1MB  
|  - Stores constants, string literals, `const` vars   |  Read-Only (r--)  
|  - Shared by both threads                            |
────────────────────────────────────────────────────────────
|  TEXT (CODE SEGMENT)                                 |  ~1MB - 10MB  
|  - Stores executable machine code                    |  Read-Execute (r-x)  
|  - Shared by both threads                            |
────────────────────────────────────────────────────────────
LOW MEMORY (Smallest Addresses)

2️⃣. Heap (Grows up) theoretically can collide with stacks(Grows down in memory)

   - Modern OS's implement protections to prevent this from happening:
   1. The OS ensures there’s enough gap between the heap and stacks to prevent overlap
      - If the heap gets too large, the OS moves it using mmap() instead of sbrk().
   2. The OS places a guard page (a small protected memory region) below each stack.
      - If a stack overflows into this guard page → segmentation fault happens before the heap is reached.
   3. 🔹 Heap Allocations Use mmap() When Large
      - If malloc() requests a very large chunk of memory (e.g., >128KB), it doesn’t use the normal heap.
      - Instead, it allocates memory using mmap(), which places the memory elsewhere, avoiding stack collisions.

    🔹 What Happens If a Collision Occurs?
    1. Segmentation Fault (SIGSEGV)
       - If the stack overflows into protected memory, the OS terminates the process.
    2. Silent Memory Corruption (Rare, but Dangerous)
       - If protections are disabled (e.g., custom memory management), the heap might overwrite the stack or vice versa, causing random crashes.
    3. Heap Allocation Failure
       - If the heap tries to expand but there’s no space, malloc() returns NULL, and your program should handle this.


